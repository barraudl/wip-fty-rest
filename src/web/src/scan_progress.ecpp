<#
 #
 # Copyright (C) 2016-2017 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file    scan_progress.ecpp
 * \author  Jana Rapava <JanaRapava@Eaton.com>
 * \brief   This call provides information about progress of autodiscovery scan.
 */
 #><%pre>
#include <string>
#include "shared/tntmlm.h"
#include "web/src/helpers.h"
#include "shared/utils_web.h"

// progress request
static zmsg_t *
req_progress (zuuid_t *uuid)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, "PROGRESS");
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    return msg;
}

int
get_scan_progress (std::string &output)
{
    output.clear();

    // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ())
    {
        log_critical ("scan_progress: mlm_pool.get () failed.");
        return -1;
    }

    zuuid_t *uuid = zuuid_new ();
    zmsg_t *request = req_progress (uuid);
    int rv = client->sendto ("fty-discovery", "progress", 1000, &request);

    if (rv == -1)
    {
        zuuid_destroy (&uuid);
        log_critical ("scan_progress: client->sendto (address = '%s') failed.", "fty-discovery");
        return -2;
    }

    zmsg_t *resp = client->recv (zuuid_str_canonical (uuid), 5);
    zuuid_destroy (&uuid);
    if (!resp)
    {
        log_critical ("info: client->recv (timeout = '5') returned NULL");
        return -3;
    }
    
    char *result = zmsg_popstr (resp);
    if (result) {
        if (streq (result, "OK")) {
            zstr_free (&result);
            output.append ("{");
            
            char *status = zmsg_popstr (resp);
            if(!status) return -5;
            output.append ("\"status\" : \"");
            output.append(status);
            if(streq(status, "-1")) {                
                zstr_free (&status);
                output.append("\"}");
                zmsg_destroy(&resp);
                return 0;
            }
            output.append("\",");    
            zstr_free (&status);
            
            char *progress = zmsg_popstr (resp);
            if (!progress) return -5;
            output.append ("\"progress\" : \"");
            output.append (progress);
            output.append ("%\", ");
            zstr_free (&progress);
            
            char *discovered = zmsg_popstr (resp);
            if(!discovered) return -5;
            output.append ("\"discovered\" : \"");
            output.append(discovered);
            output.append("\",");
            zstr_free (&discovered);
            
            char *discovered_ups = zmsg_popstr (resp);
            if(!discovered_ups) return -5;
            output.append ("\"ups-discovered\" : \"");
            output.append(discovered_ups);
            output.append("\",");
            zstr_free (&discovered_ups);
            
            char *discovered_epdu = zmsg_popstr (resp);
            if(!discovered_epdu) return -5;
            output.append ("\"epdu-discovered\" : \"");
            output.append(discovered_epdu);
            output.append("\",");
            zstr_free (&discovered_epdu);
            
            char *discovered_sts = zmsg_popstr (resp);
            if(!discovered_sts) return -5;
            output.append ("\"sts-discovered\" : \"");
            output.append(discovered_sts);
            output.append("\"");
            zstr_free (&discovered_sts);
            
            output.append("}");
        }
        else if (streq (result, "ERROR")) {
            zstr_free (&result);
            return -4;
        }
        else {
            zstr_free (&result);
            return -5;
        }
    }
    else
        return -5;

    zmsg_destroy(&resp);
    return 0;
}
</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // permission check
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Anonymous, "R"},
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string output;
    int rv = get_scan_progress (output);
    if (rv == -1)
        http_die ("internal-error", "mlmpool.get () failed.");
    else
    if (rv == -2)
        http_die ("internal-error", "client->sendto () failed.");
    else
    if (rv == -3)
        http_die ("internal-error", "client->recv () failed.");
    else
    if (rv == -4)
        http_die ("internal-error", "fty-discovery returned error.");
    else
    if (rv == -5)
        http_die ("internal-error", "fty-discovery returned malformed or unexpected message.");
    else
</%cpp>
<$$ output $>
