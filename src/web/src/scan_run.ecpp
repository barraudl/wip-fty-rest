<#
 #
 # Copyright (C) 2016-2017 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file    scan_run.ecpp
 * \author  Jana Rapava <JanaRapava@Eaton.com>
 * \brief   This call runs autodiscovery scan.
 */
 #><%pre>
#include <string>
#include "shared/tntmlm.h"
#include "web/src/helpers.h"
#include "shared/utils_web.h"
#include <cxxtools/jsondeserializer.h>

// stop request
static zmsg_t *
req_stop (zuuid_t *uuid)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, "STOPSCAN");
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    return msg;
}

// launchscan request
static zmsg_t *
req_scan (zuuid_t *uuid)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, "LAUNCHSCAN");
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    return msg;
}

int
stop_scan()
{
    // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ())
    {
        log_critical ("stop_scan: mlm_pool.get () failed.");
        return -1;
    }
    
    zuuid_t *uuid = zuuid_new ();
    zmsg_t *request = req_stop (uuid);   
    
    int rv = client->sendto ("fty-discovery", "stopscan", 1000, &request);
    
    if (rv == -1)
    {
        zuuid_destroy (&uuid);
        log_critical ("stop_scan: client->sendto (address = '%s') failed.", "fty-discovery");
        return -2;
    }

    zmsg_t *resp = client->recv (zuuid_str_canonical (uuid), 5);
    zuuid_destroy (&uuid);
    if (!resp)
    {
        log_critical ("stop_scan: client->recv (timeout = '20') returned NULL");
        return -3;
    }
    char *result = zmsg_popstr (resp);
    if (result) {
        if (streq (result, "OK")) {
                zstr_free (&result);
                return 0;
            }
        else if (streq (result, "ERROR")) {
            zstr_free (&result);
            return -4;
        }
        else {
            zstr_free (&result);
            return -5;
        }
    }
    else
        return -5;
    zstr_free (&result);
    zmsg_destroy(&resp);
    return 0;
}

int
run_scan ()
{
     // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_critical ("run_scan: mlm_pool.get () failed.");
        return -1;
    }

    zuuid_t *uuid = zuuid_new ();
    zmsg_t *request = req_scan (uuid);
    
    int rv = client->sendto ("fty-discovery", "LAUNCHSCAN", 1000, &request);
    
    if (rv == -1) {
        zuuid_destroy (&uuid);
        log_critical ("run_scan: client->sendto (address = '%s') failed.", "fty-discovery");
        return -2;
    }

    zmsg_t *resp = client->recv (zuuid_str_canonical (uuid), 5);
    zuuid_destroy (&uuid);
    if (!resp) {
        log_critical ("run_scan: client->recv (timeout = '5') returned NULL");
        return -3;
    }
    char *result = zmsg_popstr (resp);
    if (result) {
        if (streq (result, "OK")) {
                zstr_free (&result);
                return 0;
            }
        else if (streq (result, "ERROR")) {
            zstr_free (&result);
            return -4;
        }
        else if (streq (result, "STOPPING")) {
            zstr_free (&result);
            return -6;
        }
        else if (streq (result, "RUNNING")) {
            zstr_free (&result);
            return -7;
        }
        else {
            zstr_free (&result);
            return -5;
        }
    }
    else
        return -5;
    zstr_free (&result);
    zmsg_destroy(&resp);
    return 0;
}


</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // permission check
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "CD"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);
    
    //std::string config = request.getArg ("config");
    //std::string range = request.getArg ("range");
    std::string range = qparam.param("range");
    //char *checked_range = strdup (range.c_str ());
    
    int rv;
    if(request.getMethod() == "DELETE") {
        rv = stop_scan();
    }
    else if (request.getMethod() == "POST") {
        rv  = run_scan ();
    }
    else
        http_die("method-not-allowed", request.getMethod().c_str() );

    
    if (rv == -1)
        http_die ("internal-error", "mlmpool.get () failed.");
    else
    if (rv == -2)
        http_die ("internal-error", "client->sendto () failed.");
    else
    if (rv == -3)
        http_die ("internal-error", "client->recv () failed.");
    else
    if (rv == -4)
        http_die ("request-param-required", "<range>");
    else
    if (rv == -5)
        http_die ("internal-error", "fty-discovery returned malformed or unexpected message.");
    else
    if (rv == -6)
        http_die ("internal-error", "fty-discovery precedent scan currently stopping.");
    else
    if (rv == -7)
        http_die ("internal-error", "fty-discovery already have a scan running.");    
    else
    if (rv == -8)
        http_die("bad-request-document", "Please check RFC-11 for valid json schema description.");
    else
</%cpp>
